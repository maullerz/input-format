{"version":3,"file":"inputControl.js","names":["edit","parse","format","isReadOnly","getOperation","getSelection","getCaretPosition","setCaretPosition","onCut","event","input","_parse","_format","on_change","setTimeout","formatInputText","undefined","onPaste","selection","eraseSelection","onChange","onKeyDown","operation","preventDefault","text","value","slice","start","end","caret","newValueAndCaret","formatted"],"sources":["../source/inputControl.js"],"sourcesContent":["import edit   from './edit.js'\nimport parse  from './parse.js'\nimport format from './format.js'\n\nimport\n{\n\tisReadOnly,\n\tgetOperation,\n\tgetSelection,\n\tgetCaretPosition,\n\tsetCaretPosition\n}\nfrom './dom.js'\n\n// Deprecated.\n// I don't know why this function exists.\nexport function onCut(event, input, _parse, _format, on_change)\n{\n\tif (isReadOnly(input)) {\n\t\treturn\n\t}\n\n\t// The actual cut hasn't happened just yet hence the timeout.\n\tsetTimeout(() => formatInputText(input, _parse, _format, undefined, on_change), 0)\n}\n\n// Deprecated.\n// I don't know why this function exists.\nexport function onPaste(event, input, _parse, _format, on_change)\n{\n\tif (isReadOnly(input)) {\n\t\treturn\n\t}\n\n\tconst selection = getSelection(input)\n\n\t// If selection is made,\n\t// just erase the selected text\n\t// prior to pasting\n\tif (selection)\n\t{\n\t\teraseSelection(input, selection)\n\t}\n\n\tformatInputText(input, _parse, _format, undefined, on_change)\n}\n\nexport function onChange(event, input, _parse, _format, on_change)\n{\n\tformatInputText(input, _parse, _format, undefined, on_change)\n}\n\n// \"Delete\" and \"Backspace\" keys are special\n// in a way that they're not handled by the regular `onChange()` handler\n// and instead are intercepted and re-applied manually.\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\n// results in erasing a character, but that character might be any character,\n// while it would be a better \"user experience\" if it erased not just any character\n// but the closest \"meaningful\" character.\n// For example, if a template is `(xxx) xxx-xxxx`,\n// and the `<input/>` value is `(111) 222-3333`,\n// then, if a user begins erasing the `3333` part via \"Backspace\"\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\n// Nothing wrong with that, but it would be a better \"user experience\"\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\n// character, which would be the rightmost `2`.\n// So, what this `onKeyDown()` handler does is it intercepts\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\n// following the logic described above.\nexport function onKeyDown(event, input, _parse, _format, on_change)\n{\n\tif (isReadOnly(input)) {\n\t\treturn\n\t}\n\n\tconst operation = getOperation(event)\n\tswitch (operation)\n\t{\n\t\tcase 'Delete':\n\t\tcase 'Backspace':\n\t\t\t// Intercept this operation and perform it manually.\n\t\t\tevent.preventDefault()\n\n\t\t\tconst selection = getSelection(input)\n\n\t\t\t// If a selection is made, just erase the selected text.\n\t\t\tif (selection)\n\t\t\t{\n\t\t\t\teraseSelection(input, selection)\n\t\t\t\treturn formatInputText(input, _parse, _format, undefined, on_change)\n\t\t\t}\n\n\t\t\t// Else, perform the (character erasing) operation manually.\n\t\t\treturn formatInputText(input, _parse, _format, operation, on_change)\n\n\t\tdefault:\n\t\t\t// Will be handled normally as part of the `onChange` handler.\n\t}\n}\n\n/**\n * Erases the selected text inside an `<input/>`.\n * @param  {DOMElement} input\n * @param  {Selection} selection\n */\nfunction eraseSelection(input, selection)\n{\n\tlet text = input.value\n\ttext = text.slice(0, selection.start) + text.slice(selection.end)\n\n\tinput.value = text\n\tsetCaretPosition(input, selection.start)\n}\n\n/**\n * Parses and re-formats `<input/>` textual value.\n * E.g. when a user enters something into the `<input/>`\n * that raw input must first be parsed and the re-formatted properly.\n * Is called either after some user input (e.g. entered a character, pasted something)\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\n * @param  {DOMElement} input\n * @param  {Function} parse\n * @param  {Function} format\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\n * @param  {Function} onChange\n */\nfunction formatInputText(input, _parse, _format, operation, on_change)\n{\n\t// Parse `<input/>` textual value.\n\t// Get the `value` and `caret` position.\n\tlet { value, caret } = parse(input.value, getCaretPosition(input), _parse)\n\n\t// If a user performed an operation (\"Backspace\", \"Delete\")\n\t// then apply that operation and get the new `value` and `caret` position.\n\tif (operation)\n\t{\n\t\tconst newValueAndCaret = edit(value, caret, operation)\n\n\t\tvalue = newValueAndCaret.value\n\t\tcaret = newValueAndCaret.caret\n\t}\n\n\t// Format the `value`.\n\t// (and reposition the caret accordingly)\n\tconst formatted = format(value, caret, _format)\n\n\tconst text = formatted.text\n\tcaret      = formatted.caret\n\n\t// Set `<input/>` textual value manually\n\t// to prevent React from resetting the caret position\n\t// later inside a subsequent `render()`.\n\t// Doesn't work for custom `inputComponent`s for some reason.\n\tinput.value = text\n\t// Position the caret properly.\n\tsetCaretPosition(input, caret)\n\n\t// If the `<input/>` textual value did change,\n\t// then the parsed `value` may have changed too.\n\ton_change(value)\n}"],"mappings":"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"}